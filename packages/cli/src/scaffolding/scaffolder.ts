/**
 * Project scaffolding system
 */

import fs from "fs-extra";
import path from "path";
import chalk from "chalk";
import type { CreateOptions, TemplateDefinition } from "@farm/types";

export class ProjectScaffolder {
  constructor(private options: CreateOptions) {}

  /**
   * Generate a new FARM project
   */
  public async generateProject(
    projectName: string,
    templateConfig: TemplateDefinition
  ): Promise<void> {
    const projectPath = path.resolve(process.cwd(), projectName);

    // Ensure project directory doesn't exist or is empty
    await this.validateProjectPath(projectPath);

    // Create project directory
    await fs.ensureDir(projectPath);

    console.log(chalk.blue(`Creating FARM project: ${projectName}`));
    console.log(chalk.gray(`Location: ${projectPath}`));

    try {
      // Generate project structure
      await this.generateProjectStructure(projectPath, templateConfig);

      // Process template files
      await this.processTemplateFiles(projectPath, templateConfig);

      // Install dependencies if requested
      if (this.options.install !== false) {
        await this.installDependencies(projectPath);
      }

      // Initialize git if requested
      if (this.options.git !== false) {
        await this.initializeGit(projectPath);
      }

      console.log(chalk.green("\nâœ… Project created successfully!"));
      console.log(chalk.blue("\nðŸ“š Next steps:"));
      console.log(chalk.gray(`   cd ${projectName}`));
      console.log(chalk.gray("   farm dev"));
    } catch (error) {
      // Cleanup on failure
      await fs.remove(projectPath);
      throw error;
    }
  }

  private async validateProjectPath(projectPath: string): Promise<void> {
    if (await fs.pathExists(projectPath)) {
      const files = await fs.readdir(projectPath);
      if (files.length > 0 && !this.options.force) {
        throw new Error(
          `Directory ${projectPath} is not empty. Use --force to overwrite.`
        );
      }
    }
  }

  private async generateProjectStructure(
    projectPath: string,
    template: TemplateDefinition
  ): Promise<void> {
    // Create basic structure
    for (const dir of template.structure.directories) {
      const dirPath = path.join(projectPath, dir.path);
      await fs.ensureDir(dirPath);
    }
  }

  private async processTemplateFiles(
    projectPath: string,
    template: TemplateDefinition
  ): Promise<void> {
    // Process template files
    for (const file of template.structure.files) {
      const filePath = path.join(projectPath, file.path);
      await fs.ensureDir(path.dirname(filePath));

      // For now, create empty files - template processing will be implemented later
      await fs.writeFile(filePath, "// Generated by FARM CLI\n");
    }
  }

  private async installDependencies(projectPath: string): Promise<void> {
    console.log(chalk.blue("ðŸ“¦ Installing dependencies..."));
    // Implementation will be added
  }

  private async initializeGit(projectPath: string): Promise<void> {
    console.log(chalk.blue("ðŸ”§ Initializing git repository..."));
    // Implementation will be added
  }
}
