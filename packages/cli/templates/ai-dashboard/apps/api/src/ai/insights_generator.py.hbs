"""Generate textual insights from metrics and data analysis."""

from typing import List, Dict, Any, Optional
from datetime import datetime, timedelta
import pandas as pd
import numpy as np
from ..models.insight import Insight
from .analytics import compute_metrics, analyze_data_patterns
from .trend_analysis import calculate_trend, detect_anomalies

async def generate_insights(data: pd.DataFrame) -> List[Insight]:
    """
    Generate AI insights from processed data.
    
    Analyzes data patterns, trends, and anomalies to produce
    actionable insights with confidence scores.
    """
    insights = []
    
    try:
        # Basic metrics analysis
        metrics = await compute_metrics(data)
        
        # Generate insights from metrics
        for metric_name, value in metrics.items():
            if isinstance(value, (int, float)):
                insight = await _analyze_metric_value(metric_name, value, data)
                if insight:
                    insights.append(insight)
        
        # Trend analysis insights
        trend_insights = await _generate_trend_insights(data)
        insights.extend(trend_insights)
        
        # Anomaly detection insights
        anomaly_insights = await _generate_anomaly_insights(data)
        insights.extend(anomaly_insights)
        
        # Pattern recognition insights
        pattern_insights = await _generate_pattern_insights(data)
        insights.extend(pattern_insights)
        
        # Correlation insights
        correlation_insights = await _generate_correlation_insights(data)
        insights.extend(correlation_insights)
        
        return insights[:20]  # Limit to top 20 insights
        
    except Exception as e:
        # Return fallback insights if analysis fails
        return await _generate_fallback_insights(str(e))

async def generate_automated_insights() -> List[Insight]:
    """
    Generate automated insights without input data.
    
    Creates system-level insights about performance,
    health, and general recommendations.
    """
    insights = []
    current_time = datetime.utcnow()
    
    # System health insights
    insights.extend([
        Insight(
            title="System Performance",
            detail="Dashboard is operating within normal parameters with good response times",
            category="performance",
            severity="info",
            confidence=0.95,
            source="system_monitor",
            recommendations=["Continue monitoring key metrics", "Consider performance optimization"],
            created_at=current_time
        ),
        Insight(
            title="Data Quality Check",
            detail="Recent data uploads show good quality scores above 85%",
            category="data_quality",
            severity="info",
            confidence=0.88,
            source="data_validator",
            recommendations=["Maintain current data validation processes"],
            created_at=current_time
        ),
        Insight(
            title="User Engagement",
            detail="Dashboard usage has increased by 15% this week",
            category="engagement",
            severity="positive",
            confidence=0.92,
            source="usage_analytics",
            recommendations=["Analyze which features drive engagement", "Consider expanding popular features"],
            created_at=current_time
        )
    ])
    
    return insights

async def _analyze_metric_value(metric_name: str, value: float, data: pd.DataFrame) -> Optional[Insight]:
    """Analyze individual metric values for insights."""
    try:
        if metric_name.lower() in ['users', 'user_count', 'active_users']:
            if value > 1000:
                return Insight(
                    title="High User Engagement",
                    detail=f"User count ({int(value)}) indicates strong platform adoption",
                    category="engagement",
                    severity="positive",
                    confidence=0.90,
                    source="metrics_analysis",
                    recommendations=["Scale infrastructure to handle growth", "Analyze user behavior patterns"]
                )
            elif value < 50:
                return Insight(
                    title="Low User Engagement",
                    detail=f"User count ({int(value)}) suggests need for engagement strategies",
                    category="engagement",
                    severity="warning",
                    confidence=0.85,
                    source="metrics_analysis",
                    recommendations=["Implement user acquisition campaigns", "Improve onboarding experience"]
                )
        
        elif metric_name.lower() in ['revenue', 'sales', 'income']:
            if value > 100000:
                return Insight(
                    title="Strong Revenue Performance",
                    detail=f"Revenue of ${value:,.2f} exceeds expectations",
                    category="financial",
                    severity="positive",
                    confidence=0.95,
                    source="financial_analysis",
                    recommendations=["Analyze revenue drivers", "Plan for sustainable growth"]
                )
        
        return None
        
    except Exception:
        return None

async def _generate_trend_insights(data: pd.DataFrame) -> List[Insight]:
    """Generate insights from trend analysis."""
    insights = []
    
    try:
        numeric_cols = data.select_dtypes(include=[np.number]).columns
        
        for col in numeric_cols:
            if len(data[col].dropna()) > 1:
                trend = await calculate_trend(data, col)
                
                if abs(trend) > 0.2:  # Significant trend (>20% change)
                    severity = "positive" if trend > 0 else "warning"
                    direction = "increasing" if trend > 0 else "decreasing"
                    
                    insight = Insight(
                        title=f"{col.title()} Trend Alert",
                        detail=f"{col} is {direction} by {abs(trend)*100:.1f}%",
                        category="trends",
                        severity=severity,
                        confidence=min(0.95, 0.7 + abs(trend)),
                        source="trend_analysis",
                        recommendations=[
                            f"Monitor {col} closely",
                            "Investigate underlying causes" if trend < 0 else "Capitalize on positive trend"
                        ]
                    )
                    insights.append(insight)
        
        return insights
        
    except Exception:
        return []

async def _generate_anomaly_insights(data: pd.DataFrame) -> List[Insight]:
    """Generate insights from anomaly detection."""
    insights = []
    
    try:
        anomalies = await detect_anomalies(data)
        
        for anomaly in anomalies:
            insight = Insight(
                title="Data Anomaly Detected",
                detail=f"Unusual pattern detected in {anomaly.get('column', 'data')}: {anomaly.get('description', 'No description')}",
                category="anomalies",
                severity="warning",
                confidence=anomaly.get('confidence', 0.8),
                source="anomaly_detection",
                recommendations=[
                    "Investigate data source",
                    "Verify data collection process",
                    "Consider data cleaning if necessary"
                ]
            )
            insights.append(insight)
        
        return insights
        
    except Exception:
        return []

async def _generate_pattern_insights(data: pd.DataFrame) -> List[Insight]:
    """Generate insights from pattern recognition."""
    insights = []
    
    try:
        patterns = await analyze_data_patterns(data)
        
        for pattern in patterns:
            insight = Insight(
                title=f"Pattern Discovered: {pattern.get('type', 'Unknown')}",
                detail=pattern.get('description', 'No description available'),
                category="patterns",
                severity="info",
                confidence=pattern.get('confidence', 0.7),
                source="pattern_analysis",
                recommendations=pattern.get('recommendations', ["Monitor pattern evolution"])
            )
            insights.append(insight)
        
        return insights
        
    except Exception:
        return []

async def _generate_correlation_insights(data: pd.DataFrame) -> List[Insight]:
    """Generate insights from correlation analysis."""
    insights = []
    
    try:
        numeric_cols = data.select_dtypes(include=[np.number]).columns
        
        if len(numeric_cols) > 1:
            correlation_matrix = data[numeric_cols].corr()
            
            # Find strong correlations (>0.7 or <-0.7)
            for i in range(len(correlation_matrix.columns)):
                for j in range(i+1, len(correlation_matrix.columns)):
                    corr_value = correlation_matrix.iloc[i, j]
                    
                    if abs(corr_value) > 0.7:
                        col1 = correlation_matrix.columns[i]
                        col2 = correlation_matrix.columns[j]
                        relationship = "positive" if corr_value > 0 else "negative"
                        
                        insight = Insight(
                            title=f"Strong Correlation Found",
                            detail=f"{col1} and {col2} show {relationship} correlation ({corr_value:.2f})",
                            category="correlations",
                            severity="info",
                            confidence=min(0.95, abs(corr_value)),
                            source="correlation_analysis",
                            recommendations=[
                                "Investigate causal relationship",
                                "Consider using one metric to predict the other"
                            ]
                        )
                        insights.append(insight)
        
        return insights
        
    except Exception:
        return []

async def _generate_fallback_insights(error_msg: str) -> List[Insight]:
    """Generate fallback insights when analysis fails."""
    return [
        Insight(
            title="Analysis Limitation",
            detail=f"Unable to perform full data analysis: {error_msg}",
            category="system",
            severity="warning",
            confidence=0.9,
            source="error_handler",
            recommendations=[
                "Check data quality and format",
                "Ensure sufficient data volume",
                "Review analysis parameters"
            ]
        )
    ]
