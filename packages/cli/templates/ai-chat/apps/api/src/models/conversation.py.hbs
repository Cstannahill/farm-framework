# templates/ai-chat/apps/api/src/models/conversation.py.hbs
"""
Conversation model
{{#switch database}}
{{#case "mongodb"}}Conversation document model using Beanie for MongoDB{{/case}}
{{#default}}Conversation model using SQLAlchemy for SQL databases{{/default}}
{{/switch}}
"""

{{#if_database "mongodb"}}
from datetime import datetime
from typing import Optional
from beanie import Document, Indexed
from pydantic import Field

class Conversation(Document):
    """Conversation document for storing chat conversations"""
    
    title: str = Field(..., description="Conversation title")
    {{#if features.auth}}
    user_id: Indexed(str) = Field(..., description="ID of the user who owns this conversation")
    {{/if}}
    created_at: datetime = Field(default_factory=datetime.utcnow, description="When the conversation was created")
    last_activity: datetime = Field(default_factory=datetime.utcnow, description="Last activity timestamp")
    
    # Optional metadata
    metadata: dict = Field(default_factory=dict, description="Additional conversation metadata")
    
    # AI settings for this conversation
    preferred_provider: Optional[str] = Field(None, description="Preferred AI provider for this conversation")
    preferred_model: Optional[str] = Field(None, description="Preferred AI model for this conversation")
    system_prompt: Optional[str] = Field(None, description="Custom system prompt for this conversation")
    
    class Settings:
        name = "conversations"
        indexes = [
            {{#if features.auth}}
            "user_id",
            [("user_id", 1), ("last_activity", -1)],  # Compound index for user's recent conversations
            {{/if}}
            "last_activity",
            "created_at"
        ]

    class Config:
        json_schema_extra = {
            "example": {
                "title": "AI Development Discussion",
                {{#if features.auth}}
                "user_id": "user_123",
                {{/if}}
                "created_at": "2025-06-10T12:00:00Z",
                "last_activity": "2025-06-10T12:30:00Z",
                "preferred_provider": "ollama",
                "preferred_model": "llama3.1",
                "system_prompt": "You are a helpful AI assistant specialized in software development."
            }
        }

{{else}}
# SQL Database Implementation (PostgreSQL, MySQL, SQLite, SQL Server)
from datetime import datetime
from typing import Optional, Dict, Any
from sqlalchemy import Column, Integer, String, DateTime, Text, {{#if_database "postgresql" "mysql"}}JSON{{else}}Text{{/if_database}}
from sqlalchemy.sql import func
from sqlalchemy.ext.declarative import declarative_base

Base = declarative_base()

class Conversation(Base):
    """Conversation table for storing chat conversations"""
    
    __tablename__ = "conversations"
    
    id = Column(Integer, primary_key=True, index=True)
    title = Column(String(500), nullable=False)
    {{#if features.auth}}
    user_id = Column(String(50), nullable=False, index=True)
    {{/if}}
    created_at = Column(DateTime, nullable=False, default=func.now())
    last_activity = Column(DateTime, nullable=False, default=func.now(), onupdate=func.now())
    
    # Optional metadata
    {{#if_database "postgresql" "mysql"}}
    metadata = Column(JSON, nullable=True, default={})
    {{else}}
    metadata = Column(Text, nullable=True)  # JSON stored as string for SQLite/SQL Server
    {{/if_database}}
    
    # AI settings for this conversation
    preferred_provider = Column(String(50), nullable=True)
    preferred_model = Column(String(100), nullable=True)
    system_prompt = Column(Text, nullable=True)
    
    {{#if_database "sqlite" "sqlserver"}}
    def get_metadata(self) -> Dict[str, Any]:
        """Get metadata as dictionary (for SQLite/SQL Server)"""
        if self.metadata:
            import json
            return json.loads(self.metadata)
        return {}
    
    def set_metadata(self, metadata: Dict[str, Any]):
        """Set metadata from dictionary (for SQLite/SQL Server)"""
        import json
        self.metadata = json.dumps(metadata)
    {{/if_database}}

{{/if_database}}