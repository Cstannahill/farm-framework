# templates/ai-chat/apps/api/src/models/message.py.hbs
"""
Message model
{{#switch database}}
{{#case "mongodb"}}Message document model using Beanie for MongoDB{{/case}}
{{#default}}Message model using SQLAlchemy for SQL databases{{/default}}
{{/switch}}
"""

{{#if_database "mongodb"}}
from datetime import datetime
from typing import Optional, Dict, Any
from beanie import Document, Indexed
from pydantic import Field

class Message(Document):
    """Message document for storing individual chat messages"""
    
    conversation_id: Indexed(str) = Field(..., description="ID of the conversation this message belongs to")
    role: str = Field(..., description="Message role: 'user', 'assistant', or 'system'")
    content: str = Field(..., description="Message content")
    timestamp: datetime = Field(default_factory=datetime.utcnow, description="When the message was created")
    
    # AI provider information
    provider: Optional[str] = Field(None, description="AI provider used to generate this message")
    model: Optional[str] = Field(None, description="AI model used to generate this message")
    
    # Token usage tracking
    tokens_used: Optional[int] = Field(None, description="Number of tokens used for this message")
    
    # Message metadata
    metadata: Dict[str, Any] = Field(default_factory=dict, description="Additional message metadata")
    
    # Optional fields for advanced features
    edited: bool = Field(False, description="Whether this message has been edited")
    edited_at: Optional[datetime] = Field(None, description="When the message was last edited")
    parent_message_id: Optional[str] = Field(None, description="ID of the parent message (for branching conversations)")
    
    class Settings:
        name = "messages"
        indexes = [
            "conversation_id",
            [("conversation_id", 1), ("timestamp", 1)],  # Compound index for conversation message ordering
            "timestamp",
            "role",
            "provider"
        ]

    class Config:
        json_schema_extra = {
            "example": {
                "conversation_id": "conv_123",
                "role": "user",
                "content": "How do I implement authentication in FastAPI?",
                "timestamp": "2025-06-10T12:00:00Z",
                "provider": "ollama",
                "model": "llama3.1",
                "tokens_used": 25,
                "metadata": {
                    "client_ip": "192.168.1.1",
                    "user_agent": "Mozilla/5.0...",
                    "response_time": 1.2
                }
            }
        }

    def __str__(self) -> str:
        return f"Message({self.role}: {self.content[:50]}{'...' if len(self.content) > 50 else ''})"

{{else}}
# SQL Database Implementation (PostgreSQL, MySQL, SQLite, SQL Server)
from datetime import datetime
from typing import Optional, Dict, Any
from sqlalchemy import Column, Integer, String, Text, DateTime, Boolean, {{#if_database "postgresql" "mysql"}}JSON{{else}}Text{{/if_database}}
from sqlalchemy.sql import func
from sqlalchemy.ext.declarative import declarative_base

Base = declarative_base()

class Message(Base):
    """Message table for storing individual chat messages"""
    
    __tablename__ = "messages"
    
    id = Column(Integer, primary_key=True, index=True)
    conversation_id = Column(String(50), nullable=False, index=True)
    role = Column(String(20), nullable=False, index=True)  # 'user', 'assistant', 'system'
    content = Column(Text, nullable=False)
    timestamp = Column(DateTime, nullable=False, default=func.now(), index=True)
    
    # AI provider information
    provider = Column(String(50), nullable=True, index=True)
    model = Column(String(100), nullable=True)
    
    # Token usage tracking
    tokens_used = Column(Integer, nullable=True)
    
    # Message metadata
    {{#if_database "postgresql" "mysql"}}
    metadata = Column(JSON, nullable=True, default={})
    {{else}}
    metadata = Column(Text, nullable=True)  # JSON stored as string for SQLite/SQL Server
    {{/if_database}}
    
    # Optional fields for advanced features
    edited = Column(Boolean, nullable=False, default=False)
    edited_at = Column(DateTime, nullable=True)
    parent_message_id = Column(String(50), nullable=True)
    
    {{#if_database "sqlite" "sqlserver"}}
    def get_metadata(self) -> Dict[str, Any]:
        """Get metadata as dictionary (for SQLite/SQL Server)"""
        if self.metadata:
            import json
            return json.loads(self.metadata)
        return {}
    
    def set_metadata(self, metadata: Dict[str, Any]):
        """Set metadata from dictionary (for SQLite/SQL Server)"""
        import json
        self.metadata = json.dumps(metadata)
    {{/if_database}}
    
    def __str__(self) -> str:
        return f"Message({self.role}: {self.content[:50]}{'...' if len(self.content) > 50 else ''})"

{{/if_database}}