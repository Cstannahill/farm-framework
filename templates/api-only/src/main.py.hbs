from fastapi import FastAPI from fastapi.middleware.cors import CORSMiddleware
from contextlib import asynccontextmanager from core.config import settings from
core.middleware import setup_middleware from database.connection import
connect_to_mongo, close_mongo_connection from routes.api import api_router
@asynccontextmanager async def lifespan(app: FastAPI): """Lifespan context
manager for startup and shutdown events.""" # Startup await connect_to_mongo()
print("üóÑÔ∏è Database connected")

{{#if features.ai}}
  # Initialize AI providers if enabled from ai.router import
  initialize_ai_providers await initialize_ai_providers() print("ü§ñ AI providers
  initialized")
{{/if}}

print("üöÄ
{{projectName}}
API is ready!") yield # Shutdown await close_mongo_connection() print("üëã
{{projectName}}
API shutdown complete") app = FastAPI( title="{{projectName}}
API", description="{{description}}", version="{{version}}", docs_url="/docs",
redoc_url="/redoc", openapi_url="/openapi.json", lifespan=lifespan ) # Setup
middleware setup_middleware(app) # CORS middleware app.add_middleware(
CORSMiddleware, allow_origins=settings.allowed_hosts, allow_credentials=True,
allow_methods=["GET", "POST", "PUT", "PATCH", "DELETE", "OPTIONS"],
allow_headers=["*"], ) # Include API router app.include_router(api_router,
prefix="/api") # Root endpoint @app.get("/", tags=["Root"]) async def root():
"""Root endpoint with API information.""" return { "name": "{{projectName}}
API", "version": "{{version}}", "description": "{{description}}", "docs":
"/docs", "redoc": "/redoc", "openapi": "/openapi.json", "status": "running" } if
__name__ == "__main__": import uvicorn uvicorn.run( "main:app", host="0.0.0.0",
port=8000, reload=True if settings.environment == "development" else False,
log_level="info" )