"""OpenAI provider implementation."""
from typing import AsyncGenerator, List
import os
import openai
from .base import AIProvider, ChatMessage

openai.api_key = os.getenv("OPENAI_API_KEY")

class OpenAIProvider(AIProvider):
    """Interact with OpenAI chat models."""

    async def chat(self, messages: List[ChatMessage], model: str, **kwargs) -> str:
        response = await openai.ChatCompletion.acreate(
            model=model,
            messages=[m.dict() for m in messages],
            temperature=kwargs.get("temperature", 0.7),
            max_tokens=kwargs.get("max_tokens", 1000),
        )
        return response.choices[0].message.content

    async def chat_stream(self, messages: List[ChatMessage], model: str, **kwargs) -> AsyncGenerator[str, None]:
        stream = await openai.ChatCompletion.acreate(
            model=model,
            messages=[m.dict() for m in messages],
            stream=True,
            temperature=kwargs.get("temperature", 0.7),
            max_tokens=kwargs.get("max_tokens", 1000),
        )
        async for chunk in stream:
            if chunk.choices[0].delta.content:
                yield chunk.choices[0].delta.content

    async def list_models(self) -> List[str]:
        models = await openai.Model.alist()
        return [m.id for m in models.data]
