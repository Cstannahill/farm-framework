# templates/ai-chat/apps/api/src/main.py.hbs import os import logging from
contextlib import asynccontextmanager from fastapi import FastAPI,
HTTPException, Request from fastapi.middleware.cors import CORSMiddleware from
fastapi.middleware.trustedhost import TrustedHostMiddleware from
fastapi.responses import JSONResponse import uvicorn # Import routers from
.routes.chat import router as chat_router from .routes.websocket import router
as websocket_router from .ai.router import router as ai_router
{{#if features.auth}}
  from .routes.auth import router as auth_router
{{/if}}

# Import core modules from .database.connection import init_database,
close_database from .ai.manager import initialize_ai_manager from .core.config
import get_settings from .core.logging import setup_logging # Setup logging
setup_logging() logger = logging.getLogger(__name__) @asynccontextmanager async
def lifespan(app: FastAPI): """Application lifespan manager""" # Startup
logger.info("Starting
{{name}}
API...") try: # Initialize database logger.info("Initializing database...")
await init_database() # Initialize AI providers logger.info("Initializing AI
providers...") await initialize_ai_manager() logger.info("{{name}}
API started successfully!") except Exception as e: logger.error(f"Failed to
start application: {str(e)}") raise e yield # Shutdown logger.info("Shutting
down
{{name}}
API...") try: # Close database connection await close_database()
logger.info("Database connection closed") logger.info("{{name}}
API shutdown complete") except Exception as e: logger.error(f"Error during
shutdown: {str(e)}") # Create FastAPI application app = FastAPI( title="{{name}}
API", description="AI-first chat application with multi-provider support",
version="1.0.0", lifespan=lifespan, docs_url="/docs" if os.getenv("ENVIRONMENT",
"development") == "development" else None, redoc_url="/redoc" if
os.getenv("ENVIRONMENT", "development") == "development" else None, ) # Get
application settings settings = get_settings() # CORS Middleware
app.add_middleware( CORSMiddleware, allow_origins=settings.ALLOWED_ORIGINS,
allow_credentials=True, allow_methods=["GET", "POST", "PUT", "DELETE",
"OPTIONS", "PATCH"], allow_headers=["*"], ) # Trusted Host Middleware (in
production) if settings.ENVIRONMENT == "production": app.add_middleware(
TrustedHostMiddleware, allowed_hosts=settings.ALLOWED_HOSTS ) # Global exception
handler @app.exception_handler(Exception) async def
global_exception_handler(request: Request, exc: Exception): """Global exception
handler for unhandled errors""" logger.error(f"Unhandled exception: {str(exc)}",
exc_info=True) # Don't expose internal errors in production if
settings.ENVIRONMENT == "production": return JSONResponse( status_code=500,
content={ "error": "Internal server error", "message": "An unexpected error
occurred" } ) else: return JSONResponse( status_code=500, content={ "error":
"Internal server error", "message": str(exc), "type": type(exc).__name__ } ) #
HTTP Exception handler @app.exception_handler(HTTPException) async def
http_exception_handler(request: Request, exc: HTTPException): """Handle HTTP
exceptions with consistent format""" return JSONResponse(
status_code=exc.status_code, content={ "error": exc.detail, "status_code":
exc.status_code } ) # Health check endpoint @app.get("/health") async def
health_check(): """Application health check""" try: from .database.connection
import get_database_manager from .ai.manager import get_ai_manager # Check
database health db_manager = await get_database_manager() db_healthy = await
db_manager.health_check() # Check AI providers health ai_manager = await
get_ai_manager() ai_health = await ai_manager.health_check_all()
healthy_providers = sum(1 for status in ai_health.values() if status)
total_providers = len(ai_health) overall_healthy = db_healthy and
healthy_providers > 0 return { "status": "healthy" if overall_healthy else
"unhealthy", "timestamp": "{{now}}", "version": "1.0.0", "database": { "status":
"healthy" if db_healthy else "unhealthy" }, "ai_providers": { "healthy":
healthy_providers, "total": total_providers, "providers": ai_health },
"environment": settings.ENVIRONMENT } except Exception as e:
logger.error(f"Health check failed: {str(e)}") return JSONResponse(
status_code=503, content={ "status": "unhealthy", "error": str(e), "timestamp":
"{{now}}" } ) # Root endpoint @app.get("/") async def root(): """Root endpoint
with API information""" return { "name": "{{name}}
API", "description": "AI-first chat application with multi-provider support",
"version": "1.0.0", "environment": settings.ENVIRONMENT, "docs_url": "/docs" if
settings.ENVIRONMENT == "development" else None, "features": [ "chat",
"streaming", "websockets", "multi-provider-ai",
{{#if features.auth}}
  "authentication",
{{/if}}
{{#if features.realtime}}
  "realtime",
{{/if}}
] } # Include routers
{{#if features.auth}}
  app.include_router(auth_router, prefix="/api")
{{/if}}
app.include_router(chat_router, prefix="/api") app.include_router(ai_router,
prefix="/api") app.include_router(websocket_router, prefix="/ws") # Development
middleware if settings.ENVIRONMENT == "development": @app.middleware("http")
async def log_requests(request: Request, call_next): """Log all requests in
development""" start_time = time.time() response = await call_next(request)
process_time = time.time() - start_time logger.info( f"{request.method}
{request.url.path} - " f"{response.status_code} - {process_time:.3f}s" ) return
response import time # Production middleware if settings.ENVIRONMENT ==
"production": @app.middleware("http") async def security_headers(request:
Request, call_next): """Add security headers in production""" response = await
call_next(request) response.headers["X-Content-Type-Options"] = "nosniff"
response.headers["X-Frame-Options"] = "DENY"
response.headers["X-XSS-Protection"] = "1; mode=block"
response.headers["Strict-Transport-Security"] = "max-age=31536000;
includeSubDomains" return response if __name__ == "__main__": # Run with uvicorn
if executed directly port = int(os.getenv("PORT", 8000)) host =
os.getenv("HOST", "0.0.0.0") uvicorn.run( "main:app", host=host, port=port,
reload=settings.ENVIRONMENT == "development", log_level="info" if
settings.ENVIRONMENT == "production" else "debug" )