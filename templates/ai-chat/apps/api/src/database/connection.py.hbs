# templates/ai-chat/apps/api/src/database/connection.py.hbs import os import
logging from typing import Optional from motor.motor_asyncio import
AsyncIOMotorClient from beanie import init_beanie from ..models.conversation
import Conversation from ..models.message import Message
{{#if features.auth}}
  from ..models.user import User
{{/if}}

logger = logging.getLogger(__name__) class DatabaseManager: """Manages database
connection and initialization""" def __init__(self): self.client:
Optional[AsyncIOMotorClient] = None self.database = None self.is_connected =
False async def connect(self, database_url: str = None, database_name: str =
None): """Connect to MongoDB and initialize Beanie""" try: # Get connection
details from environment or parameters db_url = database_url or os.getenv(
"DATABASE_URL", "{{database.url}}" ) db_name = database_name or
os.getenv("DATABASE_NAME", "{{name}}") logger.info(f"Connecting to database:
{db_name}") # Create MongoDB client self.client = AsyncIOMotorClient(db_url)
self.database = self.client[db_name] # Test connection await
self.client.admin.command('ping') logger.info("Database connection successful")
# Initialize Beanie with document models document_models = [ Conversation,
Message,
{{#if features.auth}}
  User,
{{/if}}
] await init_beanie( database=self.database, document_models=document_models )
logger.info("Beanie initialized successfully") self.is_connected = True # Create
indexes await self.create_indexes() except Exception as e:
logger.error(f"Database connection failed: {str(e)}") raise e async def
create_indexes(self): """Create additional database indexes for performance"""
try: # Conversation indexes await
self.database.conversations.create_index("last_activity")
{{#if features.auth}}
  await self.database.conversations.create_index([("user_id", 1),
  ("last_activity", -1)])
{{/if}}

# Message indexes await self.database.messages.create_index([("conversation_id",
1), ("timestamp", 1)]) await self.database.messages.create_index("timestamp")
await self.database.messages.create_index("role")

{{#if features.auth}}
  # User indexes await self.database.users.create_index("email", unique=True)
  await self.database.users.create_index("username", unique=True, sparse=True)
{{/if}}

logger.info("Database indexes created successfully") except Exception as e:
logger.warning(f"Failed to create some indexes: {str(e)}") async def
disconnect(self): """Disconnect from the database""" if self.client:
self.client.close() self.is_connected = False logger.info("Database
disconnected") async def health_check(self) -> bool: """Check database health"""
try: if not self.client: return False await self.client.admin.command('ping')
return True except Exception as e: logger.error(f"Database health check failed:
{str(e)}") return False async def get_stats(self) -> dict: """Get database
statistics""" try: if not self.database: return {} stats = await
self.database.command("dbStats") # Get collection counts conversation_count =
await self.database.conversations.count_documents({}) message_count = await
self.database.messages.count_documents({})
{{#if features.auth}}
  user_count = await self.database.users.count_documents({})
{{/if}}

return { "database_size": stats.get("dataSize", 0), "storage_size":
stats.get("storageSize", 0), "index_size": stats.get("indexSize", 0),
"collections": stats.get("collections", 0), "objects": stats.get("objects", 0),
"conversations": conversation_count, "messages": message_count,
{{#if features.auth}}
  "users": user_count,
{{/if}}
} except Exception as e: logger.error(f"Failed to get database stats: {str(e)}")
return {} # Global database manager instance _db_manager:
Optional[DatabaseManager] = None async def get_database_manager() ->
DatabaseManager: """Get the global database manager instance""" global
_db_manager if _db_manager is None: _db_manager = DatabaseManager() await
_db_manager.connect() return _db_manager async def get_database(): """Dependency
to get database instance""" manager = await get_database_manager() return
manager.database async def init_database(database_url: str = None,
database_name: str = None): """Initialize the database connection""" global
_db_manager if _db_manager is None: _db_manager = DatabaseManager() await
_db_manager.connect(database_url, database_name) async def close_database():
"""Close the database connection""" global _db_manager if _db_manager: await
_db_manager.disconnect() _db_manager = None