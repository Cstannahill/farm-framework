# templates/ai-chat/apps/api/pyproject.toml.hbs [build-system] requires =
["hatchling"] build-backend = "hatchling.build" [project] name = "{{name}}-api"
version = "1.0.0" description = "AI-first chat application API" readme =
"README.md" license = "MIT" authors = [ { name = "{{author_name}}", email = "{{author_email}}"
}, ] classifiers = [ "Development Status :: 4 - Beta", "Intended Audience ::
Developers", "License :: OSI Approved :: MIT License", "Programming Language ::
Python :: 3", "Programming Language :: Python :: 3.10", "Programming Language ::
Python :: 3.11", "Programming Language :: Python :: 3.12", ] requires-python =
">=3.10" dependencies = [ "fastapi>=0.104.0", "uvicorn[standard]>=0.24.0",
"motor>=3.3.0", "beanie>=1.23.0", "pymongo>=4.6.0", "httpx>=0.25.0",
"pydantic[email]>=2.5.0", "pydantic-settings>=2.1.0",
"python-json-logger>=2.0.0", "python-dotenv>=1.0.0",
{{#if features.auth}}
  "python-jose[cryptography]>=3.3.0", "passlib[bcrypt]>=1.7.4",
  "python-multipart>=0.0.6",
{{/if}}
{{#if ai.providers.openai.enabled}}
  "openai>=1.3.0",
{{/if}}
{{#if features.realtime}}
  "websockets>=12.0",
{{/if}}
] [project.optional-dependencies] dev = [ "pytest>=7.4.0",
"pytest-asyncio>=0.21.0", "pytest-mock>=3.12.0", "black>=23.11.0",
"isort>=5.12.0", "flake8>=6.1.0", "mypy>=1.7.0", "coloredlogs>=15.0.0", ] prod =
[ "gunicorn>=21.2.0", "orjson>=3.9.0", "prometheus-client>=0.19.0",
"sentry-sdk[fastapi]>=1.38.0", ] [project.urls] Homepage = "https://github.com/{{author_username}}/{{name}}"
Repository = "https://github.com/{{author_username}}/{{name}}.git" Issues =
"https://github.com/{{author_username}}/{{name}}/issues" [project.scripts]
{{name}}-api = "src.main:main" [tool.black] line-length = 88 target-version =
["py310", "py311", "py312"] include = '\.pyi?$' extend-exclude = ''' /( \.git |
\.mypy_cache | \.pytest_cache | \.venv | venv | dist )/ ''' [tool.isort] profile
= "black" multi_line_output = 3 line_length = 88 include_trailing_comma = true
force_grid_wrap = 0 use_parentheses = true ensure_newline_before_comments = true
[tool.mypy] python_version = "3.10" warn_return_any = true warn_unused_configs =
true disallow_untyped_defs = false disallow_incomplete_defs = false
check_untyped_defs = true disallow_untyped_decorators = false
no_implicit_optional = true warn_redundant_casts = true warn_unused_ignores =
true warn_no_return = true warn_unreachable = true strict_equality = true
show_error_codes = true [[tool.mypy.overrides]] module = [ "motor.*",
"beanie.*", "pymongo.*", "jose.*", "passlib.*", "coloredlogs.*", ]
ignore_missing_imports = true [tool.pytest.ini_options] testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"] python_classes = ["Test*"]
python_functions = ["test_*"] addopts = [ "--strict-markers", "--strict-config",
"-ra", "--cov=src", "--cov-report=term-missing", "--cov-report=html",
"--cov-report=xml", ] asyncio_mode = "auto" markers = [ "slow: marks tests as
slow (deselect with '-m \"not slow\"')", "unit: marks tests as unit tests",
"integration: marks tests as integration tests", "auth: marks tests that require
authentication", "ai: marks tests that require AI providers", ]
[tool.coverage.run] source = ["src"] omit = [ "*/tests/*", "*/test_*",
"*/__pycache__/*", "*/venv/*", "*/.venv/*", ] [tool.coverage.report]
exclude_lines = [ "pragma: no cover", "def __repr__", "if self.debug:", "if
settings.DEBUG", "raise AssertionError", "raise NotImplementedError", "if 0:",
"if __name__ == .__main__.:", "class .*\\bProtocol\\):",
"@(abc\\.)?abstractmethod", ] [tool.ruff] target-version = "py310" line-length =
88 select = [ "E", # pycodestyle errors "W", # pycodestyle warnings "F", #
pyflakes "I", # isort "B", # flake8-bugbear "C4", # flake8-comprehensions "UP",
# pyupgrade ] ignore = [ "E501", # line too long, handled by black "B008", # do
not perform function calls in argument defaults "C901", # too complex ]
[tool.ruff.per-file-ignores] "__init__.py" = ["F401"] [tool.ruff.isort]
known-first-party = ["src"] [tool.hatch.build.targets.wheel] packages = ["src"]