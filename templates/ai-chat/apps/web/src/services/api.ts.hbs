{{> (lookup . 'API Datamap - Complete Endpoint Reference.txt') }}

// API Client implementation
class APIClient {
  private baseURL: string
  private token: string | null = null
  
  constructor(config = DEFAULT_API_CONFIG) {
    this.baseURL = config.baseURL
    this.loadToken()
  }
  
  private loadToken() {
    {{#if features.auth}}
    this.token = localStorage.getItem('access_token')
    {{else}}
    this.token = null
    {{/if}}
  }
  
  private async request<T>(
    method: string,
    path: string,
    options?: {
      body?: any
      params?: Record<string, string>
      query?: Record<string, string>
      headers?: Record<string, string>
    }
  ): Promise<T> {
    const url = new URL(path, this.baseURL)
    
    if (options?.params) {
      Object.entries(options.params).forEach(([key, value]) => {
        path = path.replace(`{${key}}`, value)
      })
    }
    
    if (options?.query) {
      Object.entries(options.query).forEach(([key, value]) => {
        if (value !== undefined) {
          url.searchParams.append(key, value)
        }
      })
    }
    
    const headers: Record<string, string> = {
      'Content-Type': 'application/json',
      ...options?.headers,
    }
    
    {{#if features.auth}}
    if (this.token) {
      headers['Authorization'] = `Bearer ${this.token}`
    }
    {{/if}}
    
    const response = await fetch(url.toString(), {
      method,
      headers,
      body: options?.body ? JSON.stringify(options.body) : undefined,
    })
    
    if (!response.ok) {
      const error = await response.json()
      throw new Error(error.message || error.error || 'Request failed')
    }
    
    return response.json()
  }
  
  // Stream helper for SSE endpoints
  async stream(
    path: string,
    body: any,
    onChunk: (chunk: ChatStreamChunk) => void,
    options?: { signal?: AbortSignal }
  ) {
    const url = new URL(path, this.baseURL)
    const headers: Record<string, string> = {
      'Content-Type': 'application/json',
      'Accept': 'text/event-stream',
    }
    
    {{#if features.auth}}
    if (this.token) {
      headers['Authorization'] = `Bearer ${this.token}`
    }
    {{/if}}
    
    const response = await fetch(url.toString(), {
      method: 'POST',
      headers,
      body: JSON.stringify(body),
      signal: options?.signal,
    })
    
    if (!response.ok) {
      const error = await response.json()
      throw new Error(error.message || error.error || 'Stream request failed')
    }
    
    const reader = response.body?.getReader()
    const decoder = new TextDecoder()
    
    if (!reader) throw new Error('No response body')
    
    try {
      while (true) {
        const { done, value } = await reader.read()
        if (done) break
        
        const chunk = decoder.decode(value)
        const lines = chunk.split('\n')
        
        for (const line of lines) {
          if (line.startsWith('data: ')) {
            const data = line.slice(6)
            if (data === '[DONE]') continue
            
            try {
              const parsed = JSON.parse(data) as ChatStreamChunk
              onChunk(parsed)
            } catch (e) {
              console.error('Failed to parse SSE chunk:', e)
            }
          }
        }
      }
    } finally {
      reader.releaseLock()
    }
  }
  
  // API methods
  {{#if features.auth}}
  auth = {
    register: (data: RegisterRequest) => 
      this.request<TokenResponse>('POST', '/auth/register', { body: data }),
    login: (data: LoginRequest) => 
      this.request<TokenResponse>('POST', '/auth/login', { body: data }),
    logout: () => 
      this.request<{ message: string }>('POST', '/auth/logout'),
    me: () => 
      this.request<User>('GET', '/auth/me'),
    updateProfile: (data: UpdateProfileRequest) => 
      this.request<User>('PUT', '/auth/me', { body: data }),
  }
  {{/if}}
  
  chat = {
    sendMessage: (data: ChatCompletionRequest) => 
      this.request<ChatCompletionResponse>('POST', '/chat', { body: data }),
    sendMessageStream: (
      data: ChatCompletionRequest, 
      onChunk: (chunk: ChatStreamChunk) => void,
      options?: { signal?: AbortSignal }
    ) => 
      this.stream('/chat/stream', data, onChunk, options),
    getConversations: () => 
      this.request<ConversationSummary[]>('GET', '/chat/conversations'),
    getMessages: (conversationId: string) => 
      this.request<Message[]>('GET', `/chat/conversations/${conversationId}/messages`),
    deleteConversation: (conversationId: string) => 
      this.request<{ message: string }>('DELETE', `/chat/conversations/${conversationId}`),
  }
  
  ai = {
    listModels: (provider?: string) => 
      this.request<ModelListResponse>('GET', '/ai/models', { 
        query: provider ? { provider } : undefined 
      }),
    healthCheck: () => 
      this.request<HealthCheckResponse>('GET', '/ai/health'),
    listProviders: () => 
      this.request<Record<string, ProviderStatus & { is_default: boolean; error?: string }>>('GET', '/ai/providers'),
  }
}

export const apiClient = new APIClient()