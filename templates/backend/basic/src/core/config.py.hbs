""" Application configuration Environment-based configuration management for
{{projectName}}
""" import os from functools import lru_cache from typing import List, Optional
from pydantic import BaseSettings, validator class Settings(BaseSettings):
"""Application settings.""" # Application app_name: str = "{{projectName}}"
environment: str = "development" debug: bool = True # Database database_url: str
= "{{#switch database}}{{#case "mongodb"}}mongodb://localhost:27017/{{kebabCase
      projectName
    }}{{/case}}{{#case
    "postgresql"
  }}postgresql://user:password@localhost:5432/{{kebabCase
      projectName
    }}{{/case}}{{#case "mysql"}}mysql://user:password@localhost:3306/{{kebabCase
      projectName
    }}{{/case}}{{#case "sqlite"}}sqlite:///./{{kebabCase
      projectName
    }}.db{{/case}}{{/switch}}" # Security secret_key: str =
"your-secret-key-change-in-production" algorithm: str = "HS256"
access_token_expire_minutes: int = 30 # CORS allowed_hosts: List[str] = [
"http://localhost:3000", "http://localhost:4000", "http://127.0.0.1:3000",
"http://127.0.0.1:4000" ]

{{#if_feature "ai"}}
  # AI Configuration ollama_url: str = "http://localhost:11434" openai_api_key:
  Optional[str] = None ai_provider: str = "ollama" # ollama, openai

{{/if_feature}}
@validator("environment") def validate_environment(cls, v): """Validate
environment setting.""" if v not in ["development", "staging", "production"]:
raise ValueError("Environment must be development, staging, or production")
return v @validator("debug", pre=True) def set_debug_from_environment(cls, v,
values): """Set debug based on environment.""" environment =
values.get("environment", "development") return environment != "production"
class Config: env_file = ".env" case_sensitive = False @lru_cache() def
get_settings() -> Settings: """Get cached settings instance.""" return
Settings() # Global settings instance settings = get_settings()