""" Database connection management

{{#switch database}}
  {{#case "mongodb"}}
    MongoDB connection using Motor and Beanie
  {{/case}}
  {{#case "postgresql"}}
    PostgreSQL connection using SQLAlchemy
  {{/case}}
  {{#case "mysql"}}
    MySQL connection using SQLAlchemy
  {{/case}}
  {{#case "sqlite"}}
    SQLite connection using SQLAlchemy
  {{/case}}
{{/switch}}
"""

{{#if_database "mongodb"}}
  from motor.motor_asyncio import AsyncIOMotorClient from beanie import
  init_beanie import logging from src.core.config import settings from
  src.models.user import User # Import all models here logger =
  logging.getLogger(__name__) class Database: client: AsyncIOMotorClient = None
  database = None db = Database() async def connect_to_database(): """Create
  database connection.""" try: db.client = AsyncIOMotorClient(
  settings.database_url, maxPoolSize=10, minPoolSize=1,
  serverSelectionTimeoutMS=5000 ) # Get database name from URL or use default
  database_name = settings.database_url.split('/')[-1] or "{{kebabCase
    projectName
  }}" db.database = db.client[database_name] # Initialize Beanie with all models
  await init_beanie( database=db.database, document_models=[ User, # Add other
  models here ] ) logger.info(f"Connected to MongoDB: {database_name}") except
  Exception as e: logger.error(f"Failed to connect to MongoDB: {e}") raise async
  def close_database_connection(): """Close database connection.""" if
  db.client: db.client.close() logger.info("Disconnected from MongoDB") async
  def get_database(): """Get database instance.""" return db.database

{{else}}
  from sqlalchemy import create_engine from sqlalchemy.ext.declarative import
  declarative_base from sqlalchemy.orm import sessionmaker from
  sqlalchemy.ext.asyncio import create_async_engine, AsyncSession import logging
  from src.core.config import settings logger = logging.getLogger(__name__) #
  Database URL conversion for async if
  settings.database_url.startswith("postgresql://"): DATABASE_URL =
  settings.database_url.replace("postgresql://", "postgresql+asyncpg://") elif
  settings.database_url.startswith("mysql://"): DATABASE_URL =
  settings.database_url.replace("mysql://", "mysql+aiomysql://") else:
  DATABASE_URL = settings.database_url engine = create_async_engine(
  DATABASE_URL, echo=settings.debug, pool_pre_ping=True ) AsyncSessionLocal =
  sessionmaker( engine, class_=AsyncSession, expire_on_commit=False ) Base =
  declarative_base() async def connect_to_database(): """Create database
  connection.""" try: # Test connection async with engine.begin() as conn: await
  conn.run_sync(Base.metadata.create_all) logger.info("Connected to database")
  except Exception as e: logger.error(f"Failed to connect to database: {e}")
  raise async def close_database_connection(): """Close database connection."""
  if engine: await engine.dispose() logger.info("Disconnected from database")
  async def get_database(): """Get database session.""" async with
  AsyncSessionLocal() as session: try: yield session finally: await
  session.close()

{{/if_database}}
