from pydantic import BaseModel, Field, EmailStr from typing import Optional,
Dict, Any from datetime import datetime from bson import ObjectId class
PyObjectId(ObjectId): """Custom ObjectId type for Pydantic compatibility."""
@classmethod def __get_validators__(cls): yield cls.validate @classmethod def
validate(cls, v): if not ObjectId.is_valid(v): raise ValueError("Invalid
ObjectId") return ObjectId(v) @classmethod def __modify_schema__(cls,
field_schema): field_schema.update(type="string") class BaseUser(BaseModel):
"""Base user model with common fields.""" name: str = Field(..., min_length=1,
max_length=100, description="User's full name") email: EmailStr = Field(...,
description="User's email address") preferences: Dict[str, Any] =
Field(default_factory=dict, description="User preferences") class Config: #
Allow population by field name and alias allow_population_by_field_name = True #
JSON encoders for custom types json_encoders = {ObjectId: str} class
CreateUserRequest(BaseUser): """Request model for creating a new user.""" pass
class UpdateUserRequest(BaseModel): """Request model for updating a user."""
name: Optional[str] = Field(None, min_length=1, max_length=100) email:
Optional[EmailStr] = None preferences: Optional[Dict[str, Any]] = None class
UserResponse(BaseUser): """Response model for user data.""" id: PyObjectId =
Field(default_factory=PyObjectId, alias="_id") created_at: datetime =
Field(default_factory=datetime.utcnow) updated_at: datetime =
Field(default_factory=datetime.utcnow) class Config:
allow_population_by_field_name = True arbitrary_types_allowed = True
json_encoders = {ObjectId: str} class User(BaseUser): """Internal user model for
database operations.""" id: Optional[PyObjectId] =
Field(default_factory=PyObjectId, alias="_id") created_at: datetime =
Field(default_factory=datetime.utcnow) updated_at: datetime =
Field(default_factory=datetime.utcnow) class Config:
allow_population_by_field_name = True arbitrary_types_allowed = True
json_encoders = {ObjectId: str} # Schema for MongoDB collection schema_extra = {
"example": { "name": "John Doe", "email": "john.doe@example.com", "preferences":
{ "theme": "dark", "notifications": True } } }