from fastapi import FastAPI from fastapi.middleware.cors import CORSMiddleware
from fastapi.staticfiles import StaticFiles from contextlib import
asynccontextmanager import os from core.config import settings from
database.connection import connect_to_mongo, close_mongo_connection from
routes.health import router as health_router from routes.users import router as
users_router @asynccontextmanager async def lifespan(app: FastAPI): """Lifespan
context manager for startup and shutdown events.""" # Startup await
connect_to_mongo() yield # Shutdown await close_mongo_connection() app =
FastAPI( title="{{projectName}}", description="{{description}}", version="{{version}}",
lifespan=lifespan ) # CORS middleware app.add_middleware( CORSMiddleware,
allow_origins=settings.allowed_hosts, allow_credentials=True,
allow_methods=["*"], allow_headers=["*"], ) # Include routers
app.include_router(health_router, prefix="/api")
app.include_router(users_router, prefix="/api") # Serve static files in
production if os.path.exists("static"): app.mount("/",
StaticFiles(directory="static", html=True), name="static") if __name__ ==
"__main__": import uvicorn uvicorn.run( "main:app", host="0.0.0.0", port=8000,
reload=True if settings.environment == "development" else False )