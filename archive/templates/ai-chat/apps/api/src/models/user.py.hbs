# templates/ai-chat/apps/api/src/models/user.py.hbs
{{#if features.auth}}
from datetime import datetime
from typing import Optional, Dict, Any
from beanie import Document, Indexed
from pydantic import Field, EmailStr, validator
from ..core.security import hash_password

class User(Document):
    """User document for authentication and user management"""
    
    # Basic user information
    email: Indexed(EmailStr, unique=True) = Field(..., description="User email address")
    username: Indexed(str, unique=True) = Field(None, description="Username (optional)")
    full_name: Optional[str] = Field(None, description="User's full name")
    
    # Authentication
    hashed_password: str = Field(..., description="Hashed password")
    is_active: bool = Field(True, description="Whether the user account is active")
    is_superuser: bool = Field(False, description="Whether the user has admin privileges")
    is_verified: bool = Field(False, description="Whether the user's email is verified")
    
    # Timestamps
    created_at: datetime = Field(default_factory=datetime.utcnow, description="Account creation timestamp")
    updated_at: datetime = Field(default_factory=datetime.utcnow, description="Last update timestamp")
    last_login: Optional[datetime] = Field(None, description="Last login timestamp")
    
    # User preferences
    preferences: Dict[str, Any] = Field(default_factory=dict, description="User preferences and settings")
    
    # AI-specific preferences
    ai_preferences: Dict[str, Any] = Field(
        default_factory=lambda: {
            "preferred_provider": None,
            "preferred_model": None,
            "default_temperature": 0.7,
            "default_max_tokens": 1000,
            "default_system_prompt": None
        }, 
        description="AI-related user preferences"
    )
    
    # Profile information
    avatar_url: Optional[str] = Field(None, description="URL to user's avatar image")
    bio: Optional[str] = Field(None, description="User bio/description")
    timezone: Optional[str] = Field("UTC", description="User's timezone")
    
    @validator('email')
    def email_must_be_lowercase(cls, v):
        """Ensure email is lowercase"""
        return v.lower()
    
    @validator('username')
    def username_alphanumeric(cls, v):
        """Ensure username is alphanumeric"""
        if v and not v.replace('_', '').replace('-', '').isalnum():
            raise ValueError('Username must be alphanumeric (underscores and hyphens allowed)')
        return v
    
    @classmethod
    async def create_user(
        cls, 
        email: str, 
        password: str, 
        full_name: str = None, 
        username: str = None,
        **kwargs
    ) -> "User":
        """Create a new user with hashed password"""
        
        hashed_password = hash_password(password)
        
        user_data = {
            "email": email.lower(),
            "hashed_password": hashed_password,
            "full_name": full_name,
            "username": username,
            **kwargs
        }
        
        user = cls(**user_data)
        await user.save()
        return user
    
    async def update_password(self, new_password: str) -> None:
        """Update user's password"""
        self.hashed_password = hash_password(new_password)
        self.updated_at = datetime.utcnow()
        await self.save()
    
    async def update_last_login(self) -> None:
        """Update last login timestamp"""
        self.last_login = datetime.utcnow()
        await self.save()
    
    async def update_preferences(self, preferences: Dict[str, Any]) -> None:
        """Update user preferences"""
        self.preferences.update(preferences)
        self.updated_at = datetime.utcnow()
        await self.save()
    
    async def update_ai_preferences(self, ai_preferences: Dict[str, Any]) -> None:
        """Update AI-related preferences"""
        self.ai_preferences.update(ai_preferences)
        self.updated_at = datetime.utcnow()
        await self.save()
    
    def to_dict(self, include_sensitive: bool = False) -> Dict[str, Any]:
        """Convert user to dictionary (excluding sensitive data by default)"""
        
        data = {
            "id": str(self.id),
            "email": self.email,
            "username": self.username,
            "full_name": self.full_name,
            "is_active": self.is_active,
            "is_verified": self.is_verified,
            "created_at": self.created_at,
            "updated_at": self.updated_at,
            "last_login": self.last_login,
            "preferences": self.preferences,
            "ai_preferences": self.ai_preferences,
            "avatar_url": self.avatar_url,
            "bio": self.bio,
            "timezone": self.timezone
        }
        
        if include_sensitive:
            data.update({
                "is_superuser": self.is_superuser,
                "hashed_password": self.hashed_password
            })
        
        return data
    
    class Settings:
        name = "users"
        indexes = [
            "email",
            "username",
            "is_active",
            "is_superuser",
            "created_at",
            "last_login"
        ]

    class Config:
        json_schema_extra = {
            "example": {
                "email": "user@example.com",
                "username": "johndoe",
                "full_name": "John Doe",
                "is_active": True,
                "is_verified": True,
                "preferences": {
                    "theme": "dark",
                    "notifications": True
                },
                "ai_preferences": {
                    "preferred_provider": "ollama",
                    "preferred_model": "llama3.1",
                    "default_temperature": 0.7
                },
                "bio": "AI enthusiast and developer",
                "timezone": "America/New_York"
            }
        }

    def __str__(self) -> str:
        return f"User({self.email})"

{{else}}
# Auth feature not enabled - provide stub User class

class User:
    """Stub User class when auth is disabled"""
    
    def __init__(self, **kwargs):
        self.id = "anonymous"
        self.email = "anonymous@example.com"
        self.is_active = True
        self.is_superuser = False

{{/if}}