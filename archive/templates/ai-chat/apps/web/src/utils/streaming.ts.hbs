// Utilities for handling streaming responses

export interface StreamParser {
  parse(chunk: string): ParsedChunk[]
}

export interface ParsedChunk {
  type: 'content' | 'error' | 'done'
  content?: string
  error?: string
}

export class SSEParser implements StreamParser {
  private buffer = ''
  
  parse(chunk: string): ParsedChunk[] {
    this.buffer += chunk
    const lines = this.buffer.split('\n')
    const results: ParsedChunk[] = []
    
    // Keep the last incomplete line in the buffer
    this.buffer = lines[lines.length - 1]
    
    for (let i = 0; i < lines.length - 1; i++) {
      const line = lines[i].trim()
      
      if (line.startsWith('data: ')) {
        const data = line.slice(6)
        
        if (data === '[DONE]') {
          results.push({ type: 'done' })
          continue
        }
        
        try {
          const parsed = JSON.parse(data)
          
          if (parsed.error) {
            results.push({ type: 'error', error: parsed.error })
          } else if (parsed.content) {
            results.push({ type: 'content', content: parsed.content })
          }
        } catch (e) {
          console.error('Failed to parse SSE data:', e)
        }
      }
    }
    
    return results
  }
  
  reset() {
    this.buffer = ''
  }
}

// Debounce function for typing indicators
export function debounce<T extends (...args: any[]) => any>(
  func: T,
  delay: number
): (...args: Parameters<T>) => void {
  let timeoutId: NodeJS.Timeout
  
  return (...args: Parameters<T>) => {
    clearTimeout(timeoutId)
    timeoutId = setTimeout(() => func(...args), delay)
  }
}

// Rate limiting for API calls
export class RateLimiter {
  private queue: Array<() => void> = []
  private processing = false
  
  constructor(
    private maxRequests: number,
    private timeWindow: number // in milliseconds
  ) {}
  
  async execute<T>(fn: () => Promise<T>): Promise<T> {
    return new Promise((resolve, reject) => {
      this.queue.push(async () => {
        try {
          const result = await fn()
          resolve(result)
        } catch (error) {
          reject(error)
        }
      })
      
      this.processQueue()
    })
  }
  
  private async processQueue() {
    if (this.processing || this.queue.length === 0) return
    
    this.processing = true
    const batch = this.queue.splice(0, this.maxRequests)
    
    await Promise.all(batch.map(fn => fn()))
    
    setTimeout(() => {
      this.processing = false
      this.processQueue()
    }, this.timeWindow)
  }
}