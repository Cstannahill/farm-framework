"""
{{projectName}}
API

{{description}}

Built with FARM Stack Framework """ from fastapi import FastAPI from
fastapi.middleware.cors import CORSMiddleware
{{#if_feature "ai"}}
  from fastapi.middleware.gzip import GZipMiddleware
{{/if_feature}}

from src.core.config import settings from src.database.connection import
connect_to_database, close_database_connection from src.routes import health{{#if_feature
  "auth"
}}, auth, users{{/if_feature}}{{#if_feature "ai"}}, ai{{/if_feature}}

# Create FastAPI application app = FastAPI( title="{{pascalCase projectName}}
API", description="{{description}}", version="0.1.0", docs_url="/docs" if
settings.environment != "production" else None, redoc_url="/redoc" if
settings.environment != "production" else None, ) # Add middleware
app.add_middleware( CORSMiddleware, allow_origins=settings.allowed_hosts,
allow_credentials=True, allow_methods=["*"], allow_headers=["*"], )

{{#if_feature "ai"}}
  # Add gzip compression for AI responses app.add_middleware(GZipMiddleware,
  minimum_size=1000)

{{/if_feature}}
# Database event handlers @app.on_event("startup") async def startup_event():
"""Connect to database on startup.""" await connect_to_database()
{{#if_feature "ai"}}
  # Initialize AI providers from src.ai.router import ai_router await
  ai_router.initialize()
{{/if_feature}}

@app.on_event("shutdown") async def shutdown_event(): """Close database
connection on shutdown.""" await close_database_connection() # Include routers
app.include_router(health.router, prefix="/api", tags=["Health"])
{{#if_feature "auth"}}
  app.include_router(auth.router, prefix="/api/auth", tags=["Authentication"])
  app.include_router(users.router, prefix="/api/users", tags=["Users"])
{{/if_feature}}
{{#if_feature "ai"}}
  app.include_router(ai.router, prefix="/api/ai", tags=["AI"])
{{/if_feature}}

@app.get("/") async def root(): """Root endpoint.""" return { "message":
"Welcome to
{{projectName}}
API", "version": "0.1.0", "docs": "/docs", "framework": "FARM Stack" } if
__name__ == "__main__": import uvicorn uvicorn.run( "main:app", host="0.0.0.0",
port=8000, reload=True, log_level="info" )